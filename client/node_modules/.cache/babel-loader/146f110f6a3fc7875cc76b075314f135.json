{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpStart, signUpSuccess, signUpFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["C:/Users/vvksn/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpStart","signUpSuccess","signUpFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest , put , all , call } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n\r\nimport { signInSuccess , signInFailure, signOutSuccess, signOutFailure , signUpStart, signUpSuccess, signUpFailure} from './user.actions';\r\n\r\nimport  { auth , googleProvider , createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth, additionalData){\r\n   try{\r\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\r\n    const  userSnapshot = yield userRef.get();\r\n  yield  put(\r\n      signInSuccess( { id: userSnapshot.id , ...userSnapshot.data() })\r\n      );\r\n} catch(error)\r\n{\r\n  yield  put(signInFailure(error));\r\n}\r\n}\r\n\r\nexport function* signInWithGoogle(){\r\n\r\n try {\r\n       const { user } = yield auth.signInWithPopup(googleProvider);\r\n       yield getSnapshotFromUserAuth(user);\r\n} catch(error){\r\n   yield put(signInFailure(error));\r\n}\r\n}\r\nexport function* signInWithEmail({ payload: { email, password }}) {\r\n   try{\r\n   const { user } =  yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getSnapshotFromUserAuth(user);\r\n   } catch(error){\r\n   yield  put(signInFailure(error));\r\n   }\r\n}\r\n\r\nexport function* isUserAuthenticated(){\r\n   try {\r\n       const userAuth = yield getCurrentUser();\r\n       if(!userAuth) return;\r\n       yield getSnapshotFromUserAuth(userAuth);\r\n   } catch(error)\r\n   {\r\n       yield put(signInFailure(error));\r\n   }\r\n}\r\n\r\nexport function* signOut() {\r\n    try{\r\n  yield  auth.signOut();\r\n yield put(signOutSuccess())\r\n    } catch(error){ \r\n        yield put(signOutFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signUp({ payload: { email, password, displayName}}){\r\n    try{\r\n        const { user } = yield auth.createUserWithEmailAndPassword(\r\n            email, \r\n            password\r\n            );\r\n    yield put(signUpSuccess({ user, additionalData: { displayName}}));\r\n    }catch(error){\r\n      yield put(signUpFailure(error));\r\n    }\r\n}\r\n\r\nexport function*  signInAfterSignUp({ payload: { user , additionalData}}){\r\n    yield getSnapshotFromUserAuth(user , additionalData);\r\n}\r\n\r\nexport function* onGoogleSignInStart(){\r\nyield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START , signInWithGoogle );\r\n}\r\n\r\nexport function* onEmailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START , signInWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\nexport  function* onSignOutStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut )\r\n}\r\n\r\nexport function* onSignUpStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\r\n}\r\n\r\nexport function* onSignUpSuccess(){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp)\r\n}\r\n\r\nexport function* userSagas(){\r\n yield all([call(onGoogleSignInStart),\r\n     call(onEmailSignInStart),\r\n      call(onCheckUserSession),\r\n     call(onSignOutStart)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}