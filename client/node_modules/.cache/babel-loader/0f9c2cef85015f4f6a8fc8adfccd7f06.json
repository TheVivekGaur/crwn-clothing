{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* oncheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated)]);\n}","map":{"version":3,"sources":["C:/Users/vvksn/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","oncheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAsBC,GAAtB,EAA4BC,GAA5B,EAAkCC,IAAlC,QAA8C,oBAA9C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,aAAT,EAAyBC,aAAzB,QAA6C,gBAA7C;AAEA,SAAUC,IAAV,EAAiBC,cAAjB,EAAkCC,yBAAlC,EAA6DC,cAA7D,QAAmF,+BAAnF;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAC/C,MAAG;AACF,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACM,yBAAD,EAA4BG,QAA5B,CAA1B;AACA,UAAOE,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA5B;AACF,UAAOd,GAAG,CACNI,aAAa,CAAE;AAAEW,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAwB,SAAGF,YAAY,CAACG,IAAb;AAA3B,KAAF,CADP,CAAV;AAGD,GANE,CAMD,OAAMC,KAAN,EACF;AACE,UAAOjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAV;AACD;AACA;AAED,OAAO,UAAUC,gBAAV,GAA4B;AAElC,MAAI;AACE,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACc,eAAL,CAAqBb,cAArB,CAAvB;AACA,UAAMG,uBAAuB,CAACS,IAAD,CAA7B;AACN,GAHA,CAGC,OAAMF,KAAN,EAAY;AACX,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACF;AACA;AACD,OAAO,UAAUI,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA2D;AAC/D,MAAG;AACH,UAAM;AAAEL,MAAAA;AAAF,QAAY,MAAMb,IAAI,CAACmB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAxB;AACC,UAAMd,uBAAuB,CAACS,IAAD,CAA7B;AACA,GAHD,CAGE,OAAMF,KAAN,EAAY;AACd,UAAOjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAV;AACC;AACH;AAED,OAAO,UAAUS,mBAAV,GAA+B;AACnC,MAAI;AACA,UAAMf,QAAQ,GAAG,MAAMF,cAAc,EAArC;AACA,QAAG,CAACE,QAAJ,EAAc;AACd,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACH,GAJD,CAIE,OAAMM,KAAN,EACF;AACI,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACH;AACH;AAED,OAAO,UAAUU,mBAAV,GAA+B;AACtC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,oBAAjB,EAAwCV,gBAAxC,CAAhB;AACC;AAED,OAAO,UAAUW,kBAAV,GAA8B;AACjC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,mBAAjB,EAAuCT,eAAvC,CAAhB;AACH;AAED,OAAO,UAAUU,kBAAV,GAA+B;AAClC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,kBAAjB,EAAqCN,mBAArC,CAAhB;AACH;AAED,OAAO,UAAUO,SAAV,GAAqB;AAC3B,QAAMhC,GAAG,CAAC,CAACC,IAAI,CAACyB,mBAAD,CAAL,EAA4BzB,IAAI,CAAC2B,kBAAD,CAAhC,EAAsD3B,IAAI,CAACwB,mBAAD,CAA1D,CAAD,CAAT;AACA","sourcesContent":["import { takeLatest , put , all , call } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n\r\nimport { signInSuccess , signInFailure} from './user.actions';\r\n\r\nimport  { auth , googleProvider , createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth){\r\n   try{\r\n    const userRef = yield call(createUserProfileDocument, userAuth);\r\n    const  userSnapshot = yield userRef.get();\r\n  yield  put(\r\n      signInSuccess( { id: userSnapshot.id , ...userSnapshot.data() })\r\n      );\r\n} catch(error)\r\n{\r\n  yield  put(signInFailure(error));\r\n}\r\n}\r\n\r\nexport function* signInWithGoogle(){\r\n\r\n try {\r\n       const { user } = yield auth.signInWithPopup(googleProvider);\r\n       yield getSnapshotFromUserAuth(user);\r\n} catch(error){\r\n   yield put(signInFailure(error));\r\n}\r\n}\r\nexport function* signInWithEmail({ payload: { email, password }}) {\r\n   try{\r\n   const { user } =  yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getSnapshotFromUserAuth(user);\r\n   } catch(error){\r\n   yield  put(signInFailure(error));\r\n   }\r\n}\r\n\r\nexport function* isUserAuthenticated(){\r\n   try {\r\n       const userAuth = yield getCurrentUser();\r\n       if(!userAuth) return;\r\n       yield getSnapshotFromUserAuth(userAuth);\r\n   } catch(error)\r\n   {\r\n       yield put(signInFailure(error));\r\n   }\r\n}\r\n\r\nexport function* onGoogleSignInStart(){\r\nyield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START , signInWithGoogle );\r\n}\r\n\r\nexport function* onEmailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START , signInWithEmail)\r\n}\r\n\r\nexport function* oncheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\nexport function* userSagas(){\r\n yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated)]);\r\n}"]},"metadata":{},"sourceType":"module"}